name: CI
env:
  DEBUG: napi:*
  APP_NAME: mdpdf
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: "1"
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Enable Corepack
        run: corepack enable && corepack prepare yarn@4.9.2 --activate && corepack install --global yarn@4.9.2
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
      - name: Install
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: corepack use yarn@4.9.2 && corepack yarn install
      - name: Prettier
        run: corepack yarn lint
      - name: Typecheck
        run: corepack yarn typecheck
      - name: Cargo fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: corepack yarn build --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: corepack yarn build --target aarch64-apple-darwin
          # Build in Docker so we can build with glibc 2.34
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: docker run --rm -v "$GITHUB_WORKSPACE":/workspace -w /workspace amazonlinux:2023 sh -c "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.88.0 && . \"/root/.cargo/env\" && export PATH=\"/root/.cargo/bin:${PATH}\" && curl -fsSL https://rpm.nodesource.com/setup_20.x | bash - && dnf update && dnf install -y nodejs gcc pkg-config openssl-devel && corepack enable && corepack prepare yarn@4.9.2 --activate && yarn install && yarn build --target x86_64-unknown-linux-gnu"
          # Build in Docker so we can build with glibc 2.34
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            build: docker run --rm -v "$GITHUB_WORKSPACE":/workspace -w /workspace amazonlinux:2023 sh -c "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.88.0 && . \"/root/.cargo/env\" && export PATH=\"/root/.cargo/bin:${PATH}\" && curl -fsSL https://rpm.nodesource.com/setup_20.x | bash - && dnf update && dnf install -y nodejs gcc pkg-config openssl-devel && corepack enable && corepack prepare yarn@4.9.2 --activate && yarn install && yarn build --target aarch64-unknown-linux-gnu"
          # Build in Docker so we can build with musl
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: docker run --rm -v "$GITHUB_WORKSPACE":/workspace -w /workspace rust:1.88.0-alpine sh -c "apk add --no-cache nodejs npm yarn openssl-dev musl-dev && npm install -g corepack && corepack enable && corepack prepare yarn@4.9.2 --activate && yarn install && yarn build --target x86_64-unknown-linux-musl"
          ### currently broken with "error: linker `aarch64-linux-musl-gcc` not found"
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   build: docker run --rm -v "$GITHUB_WORKSPACE":/workspace -w /workspace --platform linux/arm64 rust:1.88.0-alpine sh -c "apk add --no-cache nodejs npm yarn openssl-dev musl-dev build-base && npm install -g corepack && corepack enable && corepack prepare yarn@4.9.2 --activate && yarn install && yarn build --target aarch64-unknown-linux-musl"
          - host: windows-latest
            build: corepack yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Enable Corepack
        run: corepack enable && corepack prepare yarn@4.9.2 --activate && corepack install --global yarn@4.9.2
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
      - name: Install
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          toolchain: 1.88.0
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup Docker for containerized builds
        if: ${{ contains(matrix.settings.target, 'linux') }}
        run: |
          # Docker is already available in Ubuntu runners
          # Just ensure we can run Docker commands
          docker --version
        shell: bash
      - name: Setup QEMU for aarch64 builds
        if: ${{ contains(matrix.settings.target, 'aarch64-unknown-linux-musl') }}
        run: |
          # Set up QEMU for aarch64 emulation on x86_64
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        shell: bash
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        if: ${{ !contains(matrix.settings.target, 'musl') && !contains(matrix.settings.target, 'aarch64-unknown-linux-musl') }}
        run: corepack use yarn@4.9.2 && corepack yarn install
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ env.APP_NAME }}.*.node
            ${{ env.APP_NAME }}.*.wasm
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
        node:
          - "20"
          - "22"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Enable Corepack
        run: corepack enable && corepack prepare yarn@4.9.2 --activate && corepack install --global yarn@4.9.2
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: corepack use yarn@4.9.2 && corepack yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -lR .
        shell: bash
      - name: Test bindings
        run: corepack yarn test
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          # - aarch64-unknown-linux-musl
        node:
          - "20"
          - "22"
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Enable Corepack
        run: corepack enable && corepack prepare yarn@4.9.2 --activate && corepack install --global yarn@4.9.2
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ matrix.node }}
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          corepack use yarn@4.9.2
          corepack yarn config set --json supportedArchitectures.cpu '["current", "arm64", "x64", "arm"]'
          corepack yarn config set --json supportedArchitectures.libc '["current", "musl", "gnu"]'
          corepack yarn install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -lR .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: "-v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}"
          run: |
            if echo '${{ matrix.target }}' | grep -q '-musl$'; then
              apk add --no-cache openssl
            else
              apt-get update && apt-get install -y openssl
            fi
            corepack yarn test
  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - lint
      - test-macOS-windows-binding
      - test-linux-binding
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Enable Corepack
        run: corepack enable && corepack prepare yarn@4.9.2 --activate && corepack install --global yarn@4.9.2
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
      - name: Install dependencies
        run: corepack use yarn@4.9.2 && corepack yarn install
      - name: create npm dirs
        run: corepack yarn napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: corepack yarn artifacts
      - name: List packages
        run: ls -lR ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
